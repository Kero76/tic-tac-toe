{"version":3,"sources":["components/Square.js","components/Board.js","utils/Helper.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","styleClassName","isWinningPosition","react_default","a","createElement","className","onClick","value","Board","i","_this","this","winnningPosition","includes","components_Square","squares","renderSquare","Component","Helper","computeWinner","winningConfiguration","length","_winningConfiguration","Object","slicedToArray","b","c","winner","winningPosition","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","slice","setState","concat","_this2","current","symbol","gameWin","status","moves","map","step","move","desc","key","goToStep","components_Board","handleClick","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a0f25d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Function component which represent the a square in game.\r\n * \r\n * @param {any} props \r\n *  The properties of the square.\r\n */\r\nfunction Square(props) {\r\n    let isWinningPosition = props.isWinningPosition;\r\n    let styleClassName = (isWinningPosition) ? \"winning-square square\" : \"square\";\r\n\r\n    return (\r\n        <button\r\n            className={styleClassName}\r\n            onClick={() => props.onClick()}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n    //#region Actions \r\n\r\n    /**\r\n     * Render a square on board.\r\n     * \r\n     * @param {int} i \r\n     *  The number of the square on board.\r\n     */\r\n    renderSquare(i) {\r\n        let isWinningPosition = false;\r\n        const winnningPosition = this.props.winnningPosition;\r\n        if (winnningPosition && winnningPosition.includes(i)) {\r\n            isWinningPosition = true;\r\n        }\r\n\r\n        return <Square \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)}\r\n            isWinningPosition={isWinningPosition}\r\n        />;\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    //#region Render\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(0)}\r\n              {this.renderSquare(1)}\r\n              {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(3)}\r\n              {this.renderSquare(4)}\r\n              {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(6)}\r\n              {this.renderSquare(7)}\r\n              {this.renderSquare(8)}\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default Board;\r\n","export default class Helper {\r\n    \r\n    /**\r\n     * Function use to compute the winner of the game.\r\n     * \r\n     * @param {Array} squares \r\n     *  The current board configuration to compute the winner.\r\n     * @erturn {Array} \r\n     *  Winning position.\r\n     */\r\n    static computeWinner = (squares) => {\r\n        const winningConfiguration = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ]\r\n\r\n        for (let i = 0; i < winningConfiguration.length; ++i) {\r\n            const [a, b, c] = winningConfiguration[i];\r\n\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return {\r\n                    winner: squares[a],\r\n                    winningPosition : winningConfiguration[i],\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport Helper from '../utils/Helper';\r\n\r\nclass Game extends Component {\r\n    //#region Constructor\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Actions\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        // Check if the square is played.\r\n        if (squares[i] !== null) {\r\n            return;\r\n        }\r\n\r\n        // Game is complete ? \r\n        const result = Helper.computeWinner(squares);\r\n        if (result) \r\n            return;\r\n\r\n        squares[i] = (this.state.xIsNext) ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return to precise step found in history.\r\n     * If the new step is \"Go to start game\", \r\n     * the history is completely reset and the new game is launch.\r\n     * \r\n     * @param {int} stepNumber \r\n     *  The current step number.\r\n     */\r\n    goToStep(stepNumber) {\r\n        let history = this.state.history;\r\n        if (stepNumber === 0) {\r\n            history.length = 1;\r\n        }\r\n\r\n        this.setState({\r\n            stepNumber: stepNumber,\r\n            xIsNext: (stepNumber % 2) === 0,\r\n            history: history,\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Render\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const squares = current.squares.slice();\r\n        const symbol = (this.state.xIsNext) ? 'X' : 'O';\r\n\r\n        // Game is complete ? Get winner and winning positions to show it at the end of game.\r\n        const gameWin = Helper.computeWinner(squares);\r\n        const winner = (gameWin) ? gameWin.winner : null;\r\n        const winningPosition = (gameWin) ? gameWin.winningPosition : null;\r\n        const status = (winner) ? 'Winner: ' + winner : 'Next player: ' + symbol;\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move \r\n                ? 'Go to move #' + move \r\n                : 'Go to start game';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.goToStep(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={current.squares}\r\n                        onClick={i => this.handleClick(i)}\r\n                        winnningPosition={winningPosition}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{ status }</div>\r\n                    <ol>{ moves }</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport Game from './components/Game';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <Game />;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}